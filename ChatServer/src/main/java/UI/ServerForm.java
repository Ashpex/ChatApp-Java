/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import ServerCore.ServerCore;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ashpex
 */
public class ServerForm extends javax.swing.JFrame {

    private ServerCore cServer = null;
    private ServerSocket serverSocket = null;
    private final int BUFFER_SIZE = 100;
    private static final int CHUNK_SIZE = 1024;
    /**
     * Creates new form FormServer
     */
    public ServerForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jlTitle = new javax.swing.JLabel();
        jlPort = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        MessageArea = new javax.swing.JTextArea();
        start = new javax.swing.JButton();
        test = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        onlineAccounts = new javax.swing.JScrollPane();
        listOfConnections = new javax.swing.JTable();
        Exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jlTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jlTitle.setText("CHAT SERVER");

        jlPort.setText("Port");

        txtPort.setText("3200");

        MessageArea.setEditable(false);
        MessageArea.setColumns(20);
        MessageArea.setRows(5);
        jScrollPane1.setViewportView(MessageArea);

        start.setBackground(new java.awt.Color(0, 153, 0));
        start.setForeground(new java.awt.Color(255, 255, 255));
        start.setText("Start");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        test.setBackground(new java.awt.Color(153, 153, 0));
        test.setForeground(new java.awt.Color(255, 255, 255));
        test.setText("Test");
        test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jlPort, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(test, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlTitle)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jlTitle)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlPort, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(start)
                    .addComponent(test))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        onlineAccounts.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                onlineAccountsPropertyChange(evt);
            }
        });

        listOfConnections.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Tài Khoản"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        listOfConnections.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                listOfConnectionsPropertyChange(evt);
            }
        });
        onlineAccounts.setViewportView(listOfConnections);
        listOfConnections.getAccessibleContext().setAccessibleName("");
        listOfConnections.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(onlineAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(onlineAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        Exit.setBackground(new java.awt.Color(153, 0, 0));
        Exit.setForeground(new java.awt.Color(255, 255, 255));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(333, 333, 333)
                .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(Exit)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        int confirm = JOptionPane.showConfirmDialog(null, " Do you want to exit ?");
        if (confirm == 0) {
            try {
                serverSocket.close();
            } catch (IOException ex) {
                Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.exit(0);
        }

    }//GEN-LAST:event_ExitActionPerformed

    private void testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testActionPerformed
        int port = Integer.valueOf(txtPort.getText());

        MessageArea.append("\nStart at IP: 127.0.0.1");
        MessageArea.append("\nStart at Port: " + port);
        System.out.println("Test");
    }//GEN-LAST:event_testActionPerformed

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        start.setEnabled(false);
        if (txtPort.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter your port");
            return;
        }

        int port = Integer.valueOf(txtPort.getText());
        cServer = new ServerCore(port);
        try {
            serverSocket = new ServerSocket(port);
            execute();
            MessageArea.append("\nStart at Port: " + port);
            Thread thread = new Thread() {
                public void run() {

                    while (true) {
                        try {

                            Socket socket = serverSocket.accept();

                            cServer.addSocket(socket);
                            readServer(socket);

                        } catch (IOException ex) {
                            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
                            MessageArea.append("\nError!!");
                        }
                    }
                }
            };
            thread.start();
        } catch (IOException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.err.println("log");
    }//GEN-LAST:event_startActionPerformed

    private void onlineAccountsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_onlineAccountsPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_onlineAccountsPropertyChange

    private void listOfConnectionsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_listOfConnectionsPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_listOfConnectionsPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerForm().setVisible(true);
            }
        });
    }

    private void readServer(Socket socketClient) throws IOException {
        Thread thread = new Thread() {
            @Override
            public void run() {
                DataInputStream dis = null;

                try {
                    dis = new DataInputStream(socketClient.getInputStream());
                    while (true) {
                        String sms = dis.readUTF();
                        int test = 0;
                        System.out.println(sms);
                        StringTokenizer token = new StringTokenizer(sms);
                        String Format = token.nextToken();
                        System.out.println(Format);
                        
                        switch (Format) {
                            case "Info": {
                                String nameUser = token.nextToken();
                                cServer.addUserName(nameUser);
                                updateOnlineUsersList();
                                writeServer();
                                MessageArea.append("\nUser: " + nameUser + " connected");
                                break;
                            }
                            case "Exit": {
                                String nameUser = token.nextToken();
                                int idex = -1;
                                for (int i = 0; i < cServer.getUserNames().size(); i++) {
                                    if (cServer.getUserNames().get(i).equals(nameUser)) {
                                        idex = i;
                                        break;
                                    }
                                }
                                System.out.println(idex);
                                if (idex != -1) {
                                    if (!cServer.removeUser(cServer.getUserNames().get(idex), cServer.getListSocket().get(idex))) {
                                        JOptionPane.showMessageDialog(null, "Can't update clients");
                                    }
                                }
                                MessageArea.append("\nUser: " + nameUser + " logged out");
                                updateOnlineUsersList();
                                writeServer();
                                break;
                            }
                            case "ChatAll": {
                                String userSend = token.nextToken();
                                writeAll(userSend, sms);
                                
                                break;
                            }
                            case "ChatOneOne": {
                                String smsReceive = sms;
                                String userSend = token.nextToken();
                                String userReceive = token.nextToken();
                                writeOneOne(userSend, userReceive, sms);
                                break;
                            }
                            case "SEND_FILE": {
                                String fileName = token.nextToken();
                                String stFileSize = token.nextToken();
                                String userSend = token.nextToken();
                                String userReceive = token.nextToken();
                                File file = new File("./files/",fileName);
                                int indexSend = -1;
                                    for (int i = 0; i < cServer.getUserNames().size(); i++) {
                                        if (cServer.getUserNames().get(i).equals(userSend)) {
                                            indexSend = i;
                                            break;
                                        }
                                    }
                                saveFile(file,cServer.getListSocket().get(indexSend).getInputStream() );
                                    
                                
                                int index = -1;
                                    for (int i = 0; i < cServer.getUserNames().size(); i++) {
                                        if (cServer.getUserNames().get(i).equals(userReceive)) {
                                            index = i;
                                            break;
                                        }
                                    }
                                if(index != -1){
                                    DataOutputStream dos = new DataOutputStream(cServer.getListSocket().get(index).getOutputStream());
                                    String tmp ="SEND_FILE" + " " + fileName + " " + stFileSize + " " + userSend + " " + userReceive;
                                    dos.writeUTF(tmp);
                                    
                                    writeFile(file,dos);
                                    System.out.println("Finished sending " + file.getName() + " to client");
                                    
                                }   
                                System.out.println("Finished sending " + file.getName() + " to server");
                                break;
                            }

                            default:
                                

                                System.out.println("error");
                                break;
                        }

                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                    try {
                        dis.close();
                        socketClient.close();
                    } catch (IOException ex1) {
                        ex1.printStackTrace();
                    }

                }

            }
        };
        thread.start();
    }

    private void writeFile(File file,OutputStream outStream){
        FileInputStream reader = null;
        try {
            reader = new FileInputStream(file);
            byte[] buffer = new byte[CHUNK_SIZE];
            int pos = 0;
            int bytesRead;
            while ((bytesRead = reader.read(buffer, 0, CHUNK_SIZE)) >= 0) {
                outStream.write(buffer, 0, bytesRead);
                outStream.flush();
                pos += bytesRead;
                System.out.println(pos + " bytes (" + bytesRead + " bytes read)");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ex) {
                    Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    private void saveFile(File file, InputStream inStream) {
        FileOutputStream fileOut = null;
        
        try {
            fileOut = new FileOutputStream(file);
            byte[] buffer = new byte[CHUNK_SIZE];
            int bytesRead;
            int pos = 0;
            while ((bytesRead = inStream.read(buffer, 0, CHUNK_SIZE)) > 0) {
                pos += bytesRead;
                System.out.println(pos + " bytes (" + bytesRead + " bytes read)");
                fileOut.write(buffer, 0, bytesRead);
                if(bytesRead <1024){
                    break;
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ServerForm.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            if (fileOut != null) {
                try {
                    fileOut.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        System.out.println("Finished, filesize = " + file.length());
    }
    private void writeServer() {
        Thread thread = new Thread() {
            @Override
            public void run() {
                DataOutputStream dos = null;
                //Scanner sc = null;
                try {
                    String sms = "UserOnl";
                    for (String user : cServer.getUserNames()) {
                        sms = sms + " " + user;
                    }
                    for (Socket i : cServer.getListSocket()) {
                        dos = new DataOutputStream(i.getOutputStream());
                        dos.writeUTF(sms);
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                    try {
                        dos.close();

                    } catch (IOException ex1) {
                        ex1.printStackTrace();

                    }
                }
            }
        };
        thread.start();
    }

    private void writeOneOne(String userSend, String userReceive, String sms) {
        Thread thread = new Thread() {
            @Override
            public void run() {
                DataOutputStream dos = null;
                //Scanner sc = null;
                try {
                    int index = -1;
                    for (int i = 0; i < cServer.getUserNames().size(); i++) {
                        if (cServer.getUserNames().get(i).equals(userReceive)) {
                            index = i;
                            break;
                        }
                    }
                    if (index != -1) {
                        dos = new DataOutputStream(cServer.getListSocket().get(index).getOutputStream());
                        dos.writeUTF(sms);
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                    try {
                        dos.close();

                    } catch (IOException ex1) {
                        ex1.printStackTrace();

                    }
                }
            }
        };
        thread.start();
    }
    
    private void writeAll(String userSend, String sms){
        Thread thread = new Thread() {
            @Override
            public void run() {
                DataOutputStream dos = null;
                
                try {

                    for (int i = 0; i < cServer.getListSocket().size(); i++) {
                        if (!cServer.getUserNames().get(i).equals(userSend)) {
                            dos = new DataOutputStream(cServer.getListSocket().get(i).getOutputStream());
                            dos.writeUTF(sms);
                        }
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                    try {
                        dos.close();

                    } catch (IOException ex1) {
                        ex1.printStackTrace();

                    }
                }
            }
        };
        thread.start();
    }
    
    private void execute() throws IOException {

    }

    private void updateOnlineUsersList() {
        DefaultTableModel defaultTableModel = new DefaultTableModel();
        listOfConnections.setModel(defaultTableModel);
        defaultTableModel.addColumn("Users");
        List<String> onlineList = cServer.getUserNames();
        for (String i : onlineList) {
            Object[] tmp = new Object[]{i};
            defaultTableModel.addRow(tmp);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exit;
    private javax.swing.JTextArea MessageArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlPort;
    private javax.swing.JLabel jlTitle;
    private javax.swing.JTable listOfConnections;
    private javax.swing.JScrollPane onlineAccounts;
    private javax.swing.JButton start;
    private javax.swing.JButton test;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables
}
